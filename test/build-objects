#!/usr/bin/env node

// Generated by CoffeeScript 1.7.1
(function() {
  var CompilerCommand, compiler, path, spawn;

  path = require('path');

  spawn = require('child_process').spawn;

  if (process.argv.length < 4) {
    console.error('Usage: build-objects <compiler> [flags ...]' + ' <source> [sources ...] [-o output dir]');
    process.exit(1);
  }

  CompilerCommand = (function() {
    function CompilerCommand(_arguments) {
      var i, x, _i, _len, _ref;
      this["arguments"] = _arguments;
      this.outputDir = '.';
      this.files = [];
      if (this["arguments"][this["arguments"].length - 2] === '-o') {
        this.outputDir = this["arguments"].pop();
        this["arguments"].pop();
      }
      _ref = this["arguments"];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        x = _ref[i];
        if (i === 0) {
          continue;
        }
        if (x[0] !== '-') {
          this.files = this["arguments"].slice(i);
          this["arguments"] = this["arguments"].slice(0, i);
          break;
        }
      }
    }

    CompilerCommand.prototype.objectPath = function(source) {
      var bn, objName;
      bn = path.basename(source);
      objName = bn.slice(0, bn.length - path.extname(bn).length) + '.o';
      return path.join(this.outputDir, objName);
    };

    CompilerCommand.prototype.compileNext = function() {
      var file, flags, task;
      if (this.files.length === 0) {
        return;
      }
      file = this.files.pop();
      flags = this["arguments"].slice(1).concat([file, '-o', this.objectPath(file)]);
      console.log(this["arguments"][0] + ' ' + flags.join(' '));
      task = spawn(this["arguments"][0], flags, {
        stdio: 'inherit'
      });
      return task.on('close', (function(_this) {
        return function(code) {
          if (code !== 0) {
            process.exit(code);
          }
          return _this.compileNext();
        };
      })(this));
    };

    return CompilerCommand;

  })();

  compiler = new CompilerCommand(process.argv.slice(2));

  compiler.compileNext();

}).call(this);
